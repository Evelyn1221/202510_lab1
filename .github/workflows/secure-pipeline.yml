name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # 1. 原始碼安全掃描 (SAST)
  sast-scan:
    runs-on: ubuntu-latest
    name: SAST - Semgrep 掃描
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 執行 Semgrep 掃描
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # 2. 依賴套件漏洞檢測 (SCA)
  sca-scan:
    runs-on: ubuntu-latest
    name: SCA - 依賴漏洞檢測
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 建立範例 package.json
        run: |
          cat > package.json << 'EOF'
          {
            "name": "example-project",
            "version": "1.0.0",
            "dependencies": {
              "express": "^4.17.1",
              "lodash": "^4.17.20"
            }
          }
          EOF

      - name: 執行 OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: 'MyProject'
          path: '.'
          format: 'SARIF'
          args: >
            --enableExperimental
            --out reports

      - name: 上傳 SCA 結果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/dependency-check-report.sarif

  # 3. 容器映像安全掃描
  container-scan:
    runs-on: ubuntu-latest
    name: 容器映像掃描 - Trivy
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 建立範例 Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM ubuntu:22.04
          RUN apt-get update && apt-get install -y curl wget
          COPY . /app
          WORKDIR /app
          CMD ["bash"]
          EOF

      - name: 建立範例應用程式
        run: |
          echo "#!/bin/bash" > app.sh
          echo "echo 'Hello from secure app'" >> app.sh
          chmod +x app.sh

      - name: 執行 Trivy 檔案系統掃描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 上傳容器掃描結果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  # 4. 基礎設施即程式碼 (IaC) 安全檢查
  iac-scan:
    runs-on: ubuntu-latest
    name: IaC 安全檢查 - Checkov
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 設定 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安裝 Checkov
        run: pip install checkov

      - name: 建立範例 Terraform 檔案
        run: |
          mkdir -p terraform
          cat > terraform/main.tf << 'EOF'
          resource "aws_s3_bucket" "example" {
            bucket = "my-secure-bucket-12345"
          }
          
          resource "aws_s3_bucket_versioning" "example" {
            bucket = aws_s3_bucket.example.id
            versioning_configuration {
              status = "Enabled"
            }
          }
          
          resource "aws_s3_bucket_server_side_encryption_configuration" "example" {
            bucket = aws_s3_bucket.example.id
            
            rule {
              apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
              }
            }
          }
          
          resource "aws_s3_bucket_public_access_block" "example" {
            bucket = aws_s3_bucket.example.id
            
            block_public_acls       = true
            block_public_policy     = true
            ignore_public_acls      = true
            restrict_public_buckets = true
          }
          EOF

      - name: 執行 Checkov IaC 掃描
        run: |
          checkov -d terraform \
            --framework terraform \
            --output sarif \
            --output-file-path . \
            --soft-fail || true

      - name: 檢查 SARIF 檔案
        run: |
          if [ -f "results_sarif.sarif" ]; then
            echo "SARIF 檔案已產生"
            cat results_sarif.sarif
          else
            echo "警告：SARIF 檔案未找到，建立空白檔案"
            echo '{"version":"2.1.0","runs":[]}' > results_sarif.sarif
          fi

      - name: 上傳 IaC 掃描結果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results_sarif.sarif

  # 5. Secret 掃描
  secret-scan:
    runs-on: ubuntu-latest
    name: Secret 掃描 - Gitleaks
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 執行 Gitleaks 掃描
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_SUMMARY: true

  # 6. 安全掃描結果總結
  security-summary:
    runs-on: ubuntu-latest
    name: 安全掃描總結
    needs: [sast-scan, sca-scan, container-scan, iac-scan, secret-scan]
    if: always()
    steps:
      - name: 檢查掃描狀態
        run: |
          echo "==================================="
          echo "🔒 安全 CI/CD Pipeline 執行完成"
          echo "==================================="
          echo ""
          echo "📋 掃描項目狀態："
          echo "1. SAST (原始碼安全掃描) - Semgrep: ${{ needs.sast-scan.result }}"
          echo "2. SCA (依賴漏洞檢測) - Dependency-Check: ${{ needs.sca-scan.result }}"
          echo "3. 容器映像掃描 - Trivy: ${{ needs.container-scan.result }}"
          echo "4. IaC 安全檢查 - Checkov: ${{ needs.iac-scan.result }}"
          echo "5. Secret 掃描 - Gitleaks: ${{ needs.secret-scan.result }}"
          echo ""
          echo "📊 詳細結果請查看："
          echo "   - Security 標籤 → Code scanning alerts"
          echo "   - Actions 標籤 → 各個 Job 的詳細日誌"
          echo ""
          
          # 檢查是否有失敗的 job
          if [[ "${{ needs.sast-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.sca-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.container-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.iac-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
            echo "⚠️  警告：部分掃描發現問題，請檢查詳細報告"
          else
            echo "✅ 所有安全掃描已完成"
          fi